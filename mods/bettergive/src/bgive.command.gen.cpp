// Generated by scripts/generate_command_definition.py

#include "bgive.command.h"

struct givecommand_0 : Command {
  CommandParameterProxy<std::string> target;
  CommandParameterProxy<int> id;
  CommandParameterProxy<int> data;
  CommandParameterProxy<int> count;
  virtual void execute(CommandOrigin const &origin,
                       CommandOutput &output) override {
    givecommand context{origin, output};
    context.oncmd(target, id, data, count);
  }
};

void register_commands() {
  auto &instance = CustomCommandRegistry::getInstance();
  {
    auto &cmd = instance.registerCommand<givecommand>();
    {
      auto &ovl = cmd.registerOverload<givecommand_0>();
      ovl.addParameter<std::string>("target", false,
                                    offsetof(givecommand_0, target));
      ovl.addParameter<int>("id", false, offsetof(givecommand_0, id));
      ovl.addParameter<int>("data", false, offsetof(givecommand_0, data));
      ovl.addParameter<int>("count", false, offsetof(givecommand_0, count));
    }
  }
}
