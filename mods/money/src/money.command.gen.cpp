// Generated by scripts/generate_command_definition.py

#include "money.command.h"

template <> class BDL::CustomCommand::CommandParameterProxy<Query> {
  Query value;

public:
  static auto fetch_tid() { return type_id<CommandRegistry, Query>(); }
  static constexpr auto parser = &CommandRegistry::fake_parse;
  static constexpr auto type = CommandParameterDataType::NORMAL;
  static constexpr auto enum_name = "Query";

  operator Query() const noexcept { return value; }
};

template <> class BDL::CustomCommand::CommandParameterProxy<Pay> {
  Pay value;

public:
  static auto fetch_tid() { return type_id<CommandRegistry, Pay>(); }
  static constexpr auto parser = &CommandRegistry::fake_parse;
  static constexpr auto type = CommandParameterDataType::NORMAL;
  static constexpr auto enum_name = "Pay";

  operator Pay() const noexcept { return value; }
};

template <> class BDL::CustomCommand::CommandParameterProxy<Paygui> {
  Paygui value;

public:
  static auto fetch_tid() { return type_id<CommandRegistry, Paygui>(); }
  static constexpr auto parser = &CommandRegistry::fake_parse;
  static constexpr auto type = CommandParameterDataType::NORMAL;
  static constexpr auto enum_name = "Paygui";

  operator Paygui() const noexcept { return value; }
};

template <> class BDL::CustomCommand::CommandParameterProxy<Add> {
  Add value;

public:
  static auto fetch_tid() { return type_id<CommandRegistry, Add>(); }
  static constexpr auto parser = &CommandRegistry::fake_parse;
  static constexpr auto type = CommandParameterDataType::NORMAL;
  static constexpr auto enum_name = "Add";

  operator Add() const noexcept { return value; }
};

template <> class BDL::CustomCommand::CommandParameterProxy<Reduce> {
  Reduce value;

public:
  static auto fetch_tid() { return type_id<CommandRegistry, Reduce>(); }
  static constexpr auto parser = &CommandRegistry::fake_parse;
  static constexpr auto type = CommandParameterDataType::NORMAL;
  static constexpr auto enum_name = "Reduce";

  operator Reduce() const noexcept { return value; }
};

template <> class BDL::CustomCommand::CommandParameterProxy<Set> {
  Set value;

public:
  static auto fetch_tid() { return type_id<CommandRegistry, Set>(); }
  static constexpr auto parser = &CommandRegistry::fake_parse;
  static constexpr auto type = CommandParameterDataType::NORMAL;
  static constexpr auto enum_name = "Set";

  operator Set() const noexcept { return value; }
};

template <> class BDL::CustomCommand::CommandParameterProxy<Reloadcfg> {
  Reloadcfg value;

public:
  static auto fetch_tid() { return type_id<CommandRegistry, Reloadcfg>(); }
  static constexpr auto parser = &CommandRegistry::fake_parse;
  static constexpr auto type = CommandParameterDataType::NORMAL;
  static constexpr auto enum_name = "Reloadcfg";

  operator Reloadcfg() const noexcept { return value; }
};

struct MoneyCommand_0 : Command {
  CommandParameterProxy<Query> cmd;
  virtual void execute(CommandOrigin const &origin,
                       CommandOutput &output) override {
    MoneyCommand context{origin, output};
    context.query(cmd);
  }
};

struct MoneyCommand_1 : Command {
  CommandParameterProxy<Pay> cmd;
  CommandParameterProxy<std::string> target;
  CommandParameterProxy<int> count;
  virtual void execute(CommandOrigin const &origin,
                       CommandOutput &output) override {
    MoneyCommand context{origin, output};
    context.pay(cmd, target, count);
  }
};

struct MoneyCommand_2 : Command {
  CommandParameterProxy<Paygui> cmd;
  virtual void execute(CommandOrigin const &origin,
                       CommandOutput &output) override {
    MoneyCommand context{origin, output};
    context.paygui(cmd);
  }
};

struct MoneyOP_0 : Command {
  CommandParameterProxy<Add> cmd;
  CommandParameterProxy<std::string> target;
  CommandParameterProxy<int> count;
  virtual void execute(CommandOrigin const &origin,
                       CommandOutput &output) override {
    MoneyOP context{origin, output};
    context.add(cmd, target, count);
  }
};

struct MoneyOP_1 : Command {
  CommandParameterProxy<Reduce> cmd;
  CommandParameterProxy<std::string> target;
  CommandParameterProxy<int> count;
  virtual void execute(CommandOrigin const &origin,
                       CommandOutput &output) override {
    MoneyOP context{origin, output};
    context.reduce(cmd, target, count);
  }
};

struct MoneyOP_2 : Command {
  CommandParameterProxy<Set> cmd;
  CommandParameterProxy<std::string> target;
  CommandParameterProxy<int> count;
  virtual void execute(CommandOrigin const &origin,
                       CommandOutput &output) override {
    MoneyOP context{origin, output};
    context.set(cmd, target, count);
  }
};

struct MoneyOP_3 : Command {
  CommandParameterProxy<Reloadcfg> cmd;
  virtual void execute(CommandOrigin const &origin,
                       CommandOutput &output) override {
    MoneyOP context{origin, output};
    context.reloadcfg(cmd);
  }
};

void register_commands() {
  auto &instance = CustomCommandRegistry::getInstance();
  {
    auto &item = instance.registerEnum<Query>();
    item.addValue("query", Query::query);
  }
  {
    auto &item = instance.registerEnum<Pay>();
    item.addValue("pay", Pay::pay);
  }
  {
    auto &item = instance.registerEnum<Paygui>();
    item.addValue("paygui", Paygui::paygui);
  }
  {
    auto &item = instance.registerEnum<Add>();
    item.addValue("add", Add::add);
  }
  {
    auto &item = instance.registerEnum<Reduce>();
    item.addValue("reduce", Reduce::reduce);
  }
  {
    auto &item = instance.registerEnum<Set>();
    item.addValue("set", Set::set);
  }
  {
    auto &item = instance.registerEnum<Reloadcfg>();
    item.addValue("reload", Reloadcfg::reload);
  }
  {
    auto &cmd = instance.registerCommand<MoneyCommand>();
    {
      auto &ovl = cmd.registerOverload<MoneyCommand_0>();
      ovl.addParameter<Query>("cmd", false, offsetof(MoneyCommand_0, cmd));
    }
    {
      auto &ovl = cmd.registerOverload<MoneyCommand_1>();
      ovl.addParameter<Pay>("cmd", false, offsetof(MoneyCommand_1, cmd));
      ovl.addParameter<std::string>("target", false,
                                    offsetof(MoneyCommand_1, target));
      ovl.addParameter<int>("count", false, offsetof(MoneyCommand_1, count));
    }
    {
      auto &ovl = cmd.registerOverload<MoneyCommand_2>();
      ovl.addParameter<Paygui>("cmd", false, offsetof(MoneyCommand_2, cmd));
    }
  }
  {
    auto &cmd = instance.registerCommand<MoneyOP>();
    {
      auto &ovl = cmd.registerOverload<MoneyOP_0>();
      ovl.addParameter<Add>("cmd", false, offsetof(MoneyOP_0, cmd));
      ovl.addParameter<std::string>("target", false,
                                    offsetof(MoneyOP_0, target));
      ovl.addParameter<int>("count", false, offsetof(MoneyOP_0, count));
    }
    {
      auto &ovl = cmd.registerOverload<MoneyOP_1>();
      ovl.addParameter<Reduce>("cmd", false, offsetof(MoneyOP_1, cmd));
      ovl.addParameter<std::string>("target", false,
                                    offsetof(MoneyOP_1, target));
      ovl.addParameter<int>("count", false, offsetof(MoneyOP_1, count));
    }
    {
      auto &ovl = cmd.registerOverload<MoneyOP_2>();
      ovl.addParameter<Set>("cmd", false, offsetof(MoneyOP_2, cmd));
      ovl.addParameter<std::string>("target", false,
                                    offsetof(MoneyOP_2, target));
      ovl.addParameter<int>("count", false, offsetof(MoneyOP_2, count));
    }
    {
      auto &ovl = cmd.registerOverload<MoneyOP_3>();
      ovl.addParameter<Reloadcfg>("cmd", false, offsetof(MoneyOP_3, cmd));
    }
  }
}
